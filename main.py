import sqlite3
from aiogram import Bot, Dispatcher, executor, types
from config import API_TOKEN, admin
import text as tx
import kmarkup as k
import Function as fc

bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

db = sqlite3.connect('data.db')
sql = db.cursor()

@dp.message_handler(commands=['start', 'help'])  # –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã
async def start(message: types.Message):
    sql.execute(f"SELECT * FROM users WHERE user_id = {message.chat.id}")
    result = sql.fetchall()
    if len(result) == 0:
        sql.execute(f"INSERT INTO users (user_id, balance, name)"
                  f"VALUES ('{message.chat.id}', '0', '{message.from_user.mention}')")
        db.commit()
        await message.answer(tx.sogl, parse_mode='Markdown', reply_markup=k.accept)
    else:
        await message.answer(
            f'–ó–¥–∞—Ä–æ–≤–æ, {message.from_user.mention}, –∫–ª–∏–∫–∞–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π –≥–æ–ª–¥—É –±–µ—Å–ø–ª–∞—Ç–Ω–æ!\n –ó–∞ –∫–∞–∂–¥—ã–π –∫–ª–∏–∫ –≤–∞–º –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è 50 –∫–æ–ø–µ–µ–∫ –Ω–∞ –±–∞–ª–∞–Ω—Å.', reply_markup=k.menu)


@dp.message_handler(content_types=["text"])  # –†–µ–∞–∫—Ü–∏—è –Ω–∞ —Ç–µ–∫—Å—Ç
async def reaction(message: types.Message):
    chat_id = message.chat.id
    fc.first(chat_id=chat_id)
    if message.text == 'üë§ –ë–∞–ª–∞–Ω—Å':
        bal = sql.execute(f'SELECT balance FROM users WHERE user_id = "{message.chat.id}"').fetchone()
        db.commit()
        await message.answer(f'–í–∞—à –±–∞–ª–∞–Ω—Å: {fc.toFixed(bal[0], 1)}')

    elif message.text == 'üí∏ –ö–ª–∏–∫':
        sql.execute(f'UPDATE users SET balance = balance + 0.5 WHERE user_id IS "{message.chat.id}"')
        db.commit()

        await message.answer('–í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ +0.5')

    elif message.text == 'üé∞ –í—ã–≤–æ–¥':
        ballan = sql.execute(f'SELECT balance FROM users WHERE user_id = "{message.chat.id}"').fetchone()
        vivo = sql.execute(f'SELECT vivod FROM users WHERE user_id = "{message.chat.id}"').fetchone()
        db.commit()
        if ballan[0] <= 150:
            await message.answer(tx.ver)
        elif vivo[0] == 1:
            await message.answer(f"–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ –±—ã–ª–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞, –æ–∂–∏–¥–∞–π—Ç–µ –ø–æ–∫–∞ —Å –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è")
        else:
            sql.execute(f'UPDATE users SET vivod = 1 WHERE user_id IS "{message.chat.id}"')
            await message.answer(f'–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º, —Å –≤–∞–º–∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂—É—Ç—Å—è.', reply_markup=k.menu)
            await bot.send_message(admin, f'–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥:\nID - {message.chat.id}\n–Æ–∑–µ—Ä–Ω–µ–π–º - {message.from_user.mention}\n[–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]({message.from_user.url})\n–ë–∞–ª–∞–Ω—Å - {fc.toFixed(ballan[0], 1)}\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–º—É –¥–µ–Ω—å–≥–∏.', parse_mode='Markdown')
            #await bot.send_message(admin2, f'–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥:\nID - {message.chat.id}\n–Æ–∑–µ—Ä–Ω–µ–π–º - {message.from_user.mention}\n[–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]({message.from_user.url})\n–ë–∞–ª–∞–Ω—Å - {fc.toFixed(ballan[0], 1)}\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–º—É –¥–µ–Ω—å–≥–∏.',parse_mode='Markdown')
    # elif message.text == 'üé∞ –í—ã–≤–æ–¥':
    #     payed = q.execute(f'SELECT payd FROM users WHERE user_id = "{message.chat.id}"').fetchone()
    #     connection.commit()
    #     if payed[0] == 0:
    #         await message.answer(tx.ver, reply_markup=k.pay)
    #     else:
    #         bal = q.execute(f'SELECT balance FROM users WHERE user_id = "{message.chat.id}"').fetchone()
    #         connection.commit()
    #         await message.answer(f'–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º, —Å –≤–∞–º–∏ —Å–∫–æ—Ä–æ —Å–≤—è–∂—É—Ç—Å—è.',
    #                              reply_markup=k.menu)
    #         await bot.send_message(admin,
    #                                f'–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥:\nID - {message.chat.id}\n–Æ–∑–µ—Ä–Ω–µ–π–º - {message.from_user.mention}\n[–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è]({message.from_user.url})\n–ë–∞–ª–∞–Ω—Å - {fc.toFixed(bal[0], 1)}\n–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–º—É –¥–µ–Ω—å–≥–∏.',
    #                                parse_mode='Markdown')
    #         q.execute(f"UPDATE USERS SET payd = 0 WHERE user_id = {chat_id}")
    #         connection.commit()
    # elif message.text == '–û–ø–ª–∞—Ç–∏—Ç—å':
    #     link = fc.pay(chat_id=chat_id)
    #     await message.answer(f'–í–∞—à ID - {message.chat.id}\n–ö –æ–ø–ª–∞—Ç–µ - {sum}‚ÇΩ\n[–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã]({link})',
    #                          reply_markup=k.buy1, parse_mode='Markdown')

    elif message.text == '/admin':
        if str(chat_id) == str(admin):
            await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å:', reply_markup=k.apanel)
        else:
            pass
            # await message.answer('–ß–µ—Ä—Ç! –¢—ã –º–µ–Ω—è –≤–∑–ª–æ–º–∞–ªüôÉ')
    elif message.text == '/apanel':
        if str(chat_id) == str(admin):
            await  bot.send_message(admin, f'–í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!', reply_markup=k.adminpanel)
        else:
            pass
    elif message.text == '–õ—é–¥–∏-–í—ã–≤–æ–¥':
        if str(chat_id) == str(admin):
            wer = sql.execute(f'SELECT * FROM users WHERE vivod = 1').fetchall()
            viv = len(wer)
            await message.answer(f'{viv}')

@dp.callback_query_handler(lambda call: True)  # Inline —á–∞—Å—Ç—å
async def cal(call):
    chat_id = call.message.chat.id
    if call.data == 'stats':
        re = sql.execute(f'SELECT * FROM users').fetchall()
        kol = len(re)
        bal = sql.execute(f"SELECT sum(balance) FROM users").fetchone()
        db.commit()
        await call.message.answer(
            f'–í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {kol}\n–û–±—â–∏–π –±–∞–ª–∞–Ω—Å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {fc.toFixed(bal[0], 1)}')
    elif call.data == 'back':
        await call.message.answer('–ù–∞–∑–∞–¥..', reply_markup=k.menu)
    elif call.data == 'accept':
        await call.message.answer(
            f'–ü—Ä–∏–≤–µ—Ç, {call.from_user.mention}, –∫–ª–∏–∫–∞–π –∏ –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π! –ó–∞ –∫–∞–∂–¥—ã–π –∫–ª–∏–∫ –≤–∞–º –Ω–∞—á–∏—Å–ª—è–µ—Ç—Å—è 50 –∫–æ–ø–µ–µ–∫ –Ω–∞ –±–∞–ª–∞–Ω—Å.',
            reply_markup=k.menu)


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)  # –ó–∞–ø—É—Å–∫
